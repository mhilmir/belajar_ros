PID ITU PENTING BANGETT

// p tambah gede, tambah cepet nyampe tujuan, tapi kalo kegedean ngakibatin overshoot
// d buat overshoot, kalo overshoot (terlalu berosilasi), coba d nya gedein
// i juga nambahi cepet kalo nilainya digedein, sama kayak p, tapi prioritos tuning p dulu aja, i jangan dulu, i nilainya nol juga gapapa

btw, lebih enak pid nya sendiri2, jadi buat takeoff ada pid sendiri, buat setelah takeoff ada pid sendiri

===================================================================================================

Tuning

The process of tuning is roughly as follows:
    Set ki and kd to zero, and try to make a proportional controller by increasing kp till the system converges to the setpoint relatively quickly, without much overshoot.
    If the system behaves good enough, there is no need to set ki or kd.
    
    If the proportional controller was not good enough, first set kp to half the value of kp at which the system oscillates, then increase ki till the process rises quickly enough and oscillates about the setpoint.
    If the oscillations die out fast enough, there is no need to set kd.
    Increase kd till the oscillations die out quickly.


Further fine tuning can be done by increasing or decreasing kp, ki and kd by small amounts, keeping the following in mind:
    Increasing kp makes the controller more aggressive, it reduces the settling time, but also increases the oscillations, overshoot and settling time.
    Increasing ki helps in eliminating steady-state error, but increases oscillations and overshoot.
    Increasing kd smoothens out oscillations and decreases overshoot, but a high kd can make the system unstable.


The following are some other tips that are useful while tuning:
    Saturation of integral term
        Saturation of total error, ie capping it at a certain value is useful when the integral term has a tendency to dominate in certain situations,
        but reduction of ki is not possible without disturbing the controller.
    
    Setpoint ramping
        systems than have drastically and suddenly changing setpoints may cause problems such as excess overshoot, and sometimes even divergence from the setpoint.
        To fix this behavior, the setpoint can be changed from its old value to its new value slowly, for example linearly instead of abruptly.
        It is necessary to note that this slows the settling time after the change drastically.